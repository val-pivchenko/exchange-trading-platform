/**
 * @fileoverview gRPC-Web generated client stub for exchange
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.2
// source: exchange.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require("grpc-web");

var google_protobuf_timestamp_pb = require("google-protobuf/google/protobuf/timestamp_pb.js");
const proto = {};
proto.exchange = require("./exchange_pb.js");

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.exchange.ExchangeClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = "text";

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, "");
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.exchange.ExchangePromiseClient = function (
  hostname,
  credentials,
  options
) {
  if (!options) options = {};
  options.format = "text";

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, "");
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.exchange.CreateOrderRequest,
 *   !proto.exchange.CreateOrderResponse>}
 */
const methodDescriptor_Exchange_CreateOrder = new grpc.web.MethodDescriptor(
  "/exchange.Exchange/CreateOrder",
  grpc.web.MethodType.UNARY,
  proto.exchange.CreateOrderRequest,
  proto.exchange.CreateOrderResponse,
  /**
   * @param {!proto.exchange.CreateOrderRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.exchange.CreateOrderResponse.deserializeBinary
);

/**
 * @param {!proto.exchange.CreateOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.exchange.CreateOrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.exchange.CreateOrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.exchange.ExchangeClient.prototype.createOrder = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/exchange.Exchange/CreateOrder",
    request,
    metadata || {},
    methodDescriptor_Exchange_CreateOrder,
    callback
  );
};

/**
 * @param {!proto.exchange.CreateOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.exchange.CreateOrderResponse>}
 *     Promise that resolves to the response
 */
proto.exchange.ExchangePromiseClient.prototype.createOrder = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/exchange.Exchange/CreateOrder",
    request,
    metadata || {},
    methodDescriptor_Exchange_CreateOrder
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.exchange.GetOrdersRequest,
 *   !proto.exchange.GetOrdersResponse>}
 */
const methodDescriptor_Exchange_GetOrders = new grpc.web.MethodDescriptor(
  "/exchange.Exchange/GetOrders",
  grpc.web.MethodType.UNARY,
  proto.exchange.GetOrdersRequest,
  proto.exchange.GetOrdersResponse,
  /**
   * @param {!proto.exchange.GetOrdersRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.exchange.GetOrdersResponse.deserializeBinary
);

/**
 * @param {!proto.exchange.GetOrdersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.exchange.GetOrdersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.exchange.GetOrdersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.exchange.ExchangeClient.prototype.getOrders = function (
  request,
  metadata,
  callback
) {
  return this.client_.rpcCall(
    this.hostname_ + "/exchange.Exchange/GetOrders",
    request,
    metadata || {},
    methodDescriptor_Exchange_GetOrders,
    callback
  );
};

/**
 * @param {!proto.exchange.GetOrdersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.exchange.GetOrdersResponse>}
 *     Promise that resolves to the response
 */
proto.exchange.ExchangePromiseClient.prototype.getOrders = function (
  request,
  metadata
) {
  return this.client_.unaryCall(
    this.hostname_ + "/exchange.Exchange/GetOrders",
    request,
    metadata || {},
    methodDescriptor_Exchange_GetOrders
  );
};

module.exports = proto.exchange;
