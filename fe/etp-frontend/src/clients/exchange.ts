// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "exchange.proto" (package "exchange", syntax proto3)
// tslint:disable
//
//1. GET /orders
//2. POST /orders
// C:\protoc-27.2-win64\bin\protoc.exe
//
//
// protoc --java_out=target ../../exchange.proto
//
//
// Parse PROTO_FILES and generate output based on the options given:
//   -IPATH, --proto_path=PATH   Specify the directory in which to search for
//                               imports.  May be specified multiple times;
//                               directories will be searched in order.  If not        
//                               given, the current working directory is used.
//                               If not found in any of the these directories,
//                               the --descriptor_set_in descriptors will be
//                               checked for required proto file.
//   --version                   Show version info and exit.
//   -h, --help                  Show this text and exit.
//   --encode=MESSAGE_TYPE       Read a text-format message of the given type
//                               from standard input and write it in binary
//                               to standard output.  The message type must
//                               be defined in PROTO_FILES or their imports.
//   --deterministic_output      When using --encode, ensure map fields are
//                               deterministically ordered. Note that this order       
//                               is not canonical, and changes across builds or        
//                               releases of protoc.
//   --decode=MESSAGE_TYPE       Read a binary message of the given type from
//                               standard input and write it in text format
//                               to standard output.  The message type must
//                               be defined in PROTO_FILES or their imports.
//   --decode_raw                Read an arbitrary protocol message from
//                               standard input and write the raw tag/value
//                               pairs in text format to standard output.  No
//                               PROTO_FILES should be given when using this
//                               flag.
//   --descriptor_set_in=FILES   Specifies a delimited list of FILES
//                               each containing a FileDescriptorSet (a
//                               protocol buffer defined in descriptor.proto).
//                               The FileDescriptor for each of the PROTO_FILES        
//                               provided will be loaded from these
//                               FileDescriptorSets. If a FileDescriptor
//                               appears multiple times, the first occurrence
//                               will be used.
//   -oFILE,                     Writes a FileDescriptorSet (a protocol buffer,        
//     --descriptor_set_out=FILE defined in descriptor.proto) containing all of        
//                               the input files to FILE.
//   --include_imports           When using --descriptor_set_out, also include
//                               all dependencies of the input files in the
//                               set, so that the set is self-contained.
//   --include_source_info       When using --descriptor_set_out, do not strip
//                               SourceCodeInfo from the FileDescriptorProto.
//                               This results in vastly larger descriptors that        
//                               include information about the original
//                               location of each decl in the source file as
//                               well as surrounding comments.
//   --retain_options            When using --descriptor_set_out, do not strip
//                               any options from the FileDescriptorProto.
//                               This results in potentially larger descriptors        
//                               that include information about options that were      
//                               only meant to be useful during compilation.
//   --dependency_out=FILE       Write a dependency output file in the format
//                               expected by make. This writes the transitive
//                               set of input file paths to FILE
//   --error_format=FORMAT       Set the format in which to print errors.
//                               FORMAT may be 'gcc' (the default) or 'msvs'
//                               (Microsoft Visual Studio format).
//   --fatal_warnings            Make warnings be fatal (similar to -Werr in
//                               gcc). This flag will make protoc return
//                               with a non-zero exit code if any warnings
//                               are generated.
//   --print_free_field_numbers  Print the free field numbers of the messages
//                               defined in the given proto files. Extension ranges    
//                               are counted as occupied fields numbers.
//   --enable_codegen_trace      Enables tracing which parts of protoc are
//                               responsible for what codegen output. Not supported    
//                               by all backends or on all platforms.
//   --plugin=EXECUTABLE         Specifies a plugin executable to use.
//                               Normally, protoc searches the PATH for
//                               plugins, but you may specify additional
//                               executables not in the path using this flag.
//                               Additionally, EXECUTABLE may be of the form
//                               NAME=PATH, in which case the given plugin name        
//                               is mapped to the given executable even if
//                               the executable's own name differs.
//   --cpp_out=OUT_DIR           Generate C++ header and source.
//   --csharp_out=OUT_DIR        Generate C# source file.
//   --java_out=OUT_DIR          Generate Java source file.
//   --kotlin_out=OUT_DIR        Generate Kotlin file.
//   --objc_out=OUT_DIR          Generate Objective-C header and source.
//   --php_out=OUT_DIR           Generate PHP source file.
//   --pyi_out=OUT_DIR           Generate python pyi stub.
//   --python_out=OUT_DIR        Generate Python source file.
//   --ruby_out=OUT_DIR          Generate Ruby source file.
//   --rust_out=OUT_DIR          Generate Rust sources.
//   @<filename>                 Read options and filenames from file. If a
//                               relative file path is specified, the file
//                               will be searched in the working directory.
//                               The --proto_path option will not affect how
//                               this argument file is searched. Content of
//                               the file will be expanded in the position of
//                               @<filename> as in the argument list. Note
//                               that shell expansion is not applied to the
//                               content of the file (i.e., you cannot use
//                               quotes, wildcards, escapes, commands, etc.).
//                               Each line corresponds to a single argument,
//                               even if it contains spaces.
//
//
//FIGURE OUT CLIENT PART CREATE GRPC TYPESCRIPT
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message exchange.CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     * @generated from protobuf field: double price = 1;
     */
    price: number;
    /**
     * @generated from protobuf field: exchange.Side side = 2;
     */
    side: Side;
    /**
     * @generated from protobuf field: int32 quantity = 3;
     */
    quantity: number;
}
/**
 * @generated from protobuf message exchange.CreateOrderResponse
 */
export interface CreateOrderResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message exchange.GetOrdersRequest
 */
export interface GetOrdersRequest {
}
/**
 * @generated from protobuf message exchange.Order
 */
export interface Order {
    /**
     * @generated from protobuf field: double price = 1;
     */
    price: number;
    /**
     * @generated from protobuf field: exchange.Side side = 2;
     */
    side: Side;
    /**
     * @generated from protobuf field: int32 quantity = 3;
     */
    quantity: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message exchange.GetOrdersResponse
 */
export interface GetOrdersResponse {
    /**
     * @generated from protobuf field: repeated exchange.Order orders = 1;
     */
    orders: Order[];
}
/**
 * @generated from protobuf enum exchange.Side
 */
export enum Side {
    /**
     * @generated from protobuf enum value: BUY = 0;
     */
    BUY = 0,
    /**
     * @generated from protobuf enum value: SELL = 1;
     */
    SELL = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderRequest$Type extends MessageType<CreateOrderRequest> {
    constructor() {
        super("exchange.CreateOrderRequest", [
            { no: 1, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "side", kind: "enum", T: () => ["exchange.Side", Side] },
            { no: 3, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrderRequest>): CreateOrderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.price = 0;
        message.side = 0;
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderRequest): CreateOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double price */ 1:
                    message.price = reader.double();
                    break;
                case /* exchange.Side side */ 2:
                    message.side = reader.int32();
                    break;
                case /* int32 quantity */ 3:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit64).double(message.price);
        /* exchange.Side side = 2; */
        if (message.side !== 0)
            writer.tag(2, WireType.Varint).int32(message.side);
        /* int32 quantity = 3; */
        if (message.quantity !== 0)
            writer.tag(3, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message exchange.CreateOrderRequest
 */
export const CreateOrderRequest = new CreateOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderResponse$Type extends MessageType<CreateOrderResponse> {
    constructor() {
        super("exchange.CreateOrderResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrderResponse>): CreateOrderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CreateOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderResponse): CreateOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message exchange.CreateOrderResponse
 */
export const CreateOrderResponse = new CreateOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrdersRequest$Type extends MessageType<GetOrdersRequest> {
    constructor() {
        super("exchange.GetOrdersRequest", []);
    }
    create(value?: PartialMessage<GetOrdersRequest>): GetOrdersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetOrdersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrdersRequest): GetOrdersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetOrdersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message exchange.GetOrdersRequest
 */
export const GetOrdersRequest = new GetOrdersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Order$Type extends MessageType<Order> {
    constructor() {
        super("exchange.Order", [
            { no: 1, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "side", kind: "enum", T: () => ["exchange.Side", Side] },
            { no: 3, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Order>): Order {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.price = 0;
        message.side = 0;
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<Order>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Order): Order {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double price */ 1:
                    message.price = reader.double();
                    break;
                case /* exchange.Side side */ 2:
                    message.side = reader.int32();
                    break;
                case /* int32 quantity */ 3:
                    message.quantity = reader.int32();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 4:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Order, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit64).double(message.price);
        /* exchange.Side side = 2; */
        if (message.side !== 0)
            writer.tag(2, WireType.Varint).int32(message.side);
        /* int32 quantity = 3; */
        if (message.quantity !== 0)
            writer.tag(3, WireType.Varint).int32(message.quantity);
        /* google.protobuf.Timestamp timestamp = 4; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message exchange.Order
 */
export const Order = new Order$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrdersResponse$Type extends MessageType<GetOrdersResponse> {
    constructor() {
        super("exchange.GetOrdersResponse", [
            { no: 1, name: "orders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Order }
        ]);
    }
    create(value?: PartialMessage<GetOrdersResponse>): GetOrdersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orders = [];
        if (value !== undefined)
            reflectionMergePartial<GetOrdersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrdersResponse): GetOrdersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated exchange.Order orders */ 1:
                    message.orders.push(Order.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOrdersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated exchange.Order orders = 1; */
        for (let i = 0; i < message.orders.length; i++)
            Order.internalBinaryWrite(message.orders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message exchange.GetOrdersResponse
 */
export const GetOrdersResponse = new GetOrdersResponse$Type();
/**
 * @generated ServiceType for protobuf service exchange.Exchange
 */
export const Exchange = new ServiceType("exchange.Exchange", [
    { name: "CreateOrder", options: {}, I: CreateOrderRequest, O: CreateOrderResponse },
    { name: "GetOrders", options: {}, I: GetOrdersRequest, O: GetOrdersResponse }
]);
