// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "exchange.proto" (package "com.psa", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message com.psa.CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     * @generated from protobuf field: double price = 1;
     */
    price: number;
    /**
     * @generated from protobuf field: com.psa.Side side = 2;
     */
    side: Side;
    /**
     * @generated from protobuf field: int32 quantity = 3;
     */
    quantity: number;
}
/**
 * @generated from protobuf message com.psa.CreateOrderResponse
 */
export interface CreateOrderResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message com.psa.GetOrdersRequest
 */
export interface GetOrdersRequest {
}
/**
 * @generated from protobuf message com.psa.Order
 */
export interface Order {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: double price = 2;
     */
    price: number;
    /**
     * @generated from protobuf field: com.psa.Side side = 3;
     */
    side: Side;
    /**
     * @generated from protobuf field: int32 quantity = 4;
     */
    quantity: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message com.psa.GetOrdersResponse
 */
export interface GetOrdersResponse {
    /**
     * @generated from protobuf field: repeated com.psa.Order orders = 1;
     */
    orders: Order[];
}
/**
 * @generated from protobuf enum com.psa.Side
 */
export enum Side {
    /**
     * @generated from protobuf enum value: BUY = 0;
     */
    BUY = 0,
    /**
     * @generated from protobuf enum value: SELL = 1;
     */
    SELL = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderRequest$Type extends MessageType<CreateOrderRequest> {
    constructor() {
        super("com.psa.CreateOrderRequest", [
            { no: 1, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "side", kind: "enum", T: () => ["com.psa.Side", Side] },
            { no: 3, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrderRequest>): CreateOrderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.price = 0;
        message.side = 0;
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderRequest): CreateOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double price */ 1:
                    message.price = reader.double();
                    break;
                case /* com.psa.Side side */ 2:
                    message.side = reader.int32();
                    break;
                case /* int32 quantity */ 3:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit64).double(message.price);
        /* com.psa.Side side = 2; */
        if (message.side !== 0)
            writer.tag(2, WireType.Varint).int32(message.side);
        /* int32 quantity = 3; */
        if (message.quantity !== 0)
            writer.tag(3, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.psa.CreateOrderRequest
 */
export const CreateOrderRequest = new CreateOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderResponse$Type extends MessageType<CreateOrderResponse> {
    constructor() {
        super("com.psa.CreateOrderResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrderResponse>): CreateOrderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CreateOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderResponse): CreateOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.psa.CreateOrderResponse
 */
export const CreateOrderResponse = new CreateOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrdersRequest$Type extends MessageType<GetOrdersRequest> {
    constructor() {
        super("com.psa.GetOrdersRequest", []);
    }
    create(value?: PartialMessage<GetOrdersRequest>): GetOrdersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetOrdersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrdersRequest): GetOrdersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetOrdersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.psa.GetOrdersRequest
 */
export const GetOrdersRequest = new GetOrdersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Order$Type extends MessageType<Order> {
    constructor() {
        super("com.psa.Order", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "side", kind: "enum", T: () => ["com.psa.Side", Side] },
            { no: 4, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Order>): Order {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.price = 0;
        message.side = 0;
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<Order>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Order): Order {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* double price */ 2:
                    message.price = reader.double();
                    break;
                case /* com.psa.Side side */ 3:
                    message.side = reader.int32();
                    break;
                case /* int32 quantity */ 4:
                    message.quantity = reader.int32();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 5:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Order, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* double price = 2; */
        if (message.price !== 0)
            writer.tag(2, WireType.Bit64).double(message.price);
        /* com.psa.Side side = 3; */
        if (message.side !== 0)
            writer.tag(3, WireType.Varint).int32(message.side);
        /* int32 quantity = 4; */
        if (message.quantity !== 0)
            writer.tag(4, WireType.Varint).int32(message.quantity);
        /* google.protobuf.Timestamp timestamp = 5; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.psa.Order
 */
export const Order = new Order$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrdersResponse$Type extends MessageType<GetOrdersResponse> {
    constructor() {
        super("com.psa.GetOrdersResponse", [
            { no: 1, name: "orders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Order }
        ]);
    }
    create(value?: PartialMessage<GetOrdersResponse>): GetOrdersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orders = [];
        if (value !== undefined)
            reflectionMergePartial<GetOrdersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrdersResponse): GetOrdersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.psa.Order orders */ 1:
                    message.orders.push(Order.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOrdersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.psa.Order orders = 1; */
        for (let i = 0; i < message.orders.length; i++)
            Order.internalBinaryWrite(message.orders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.psa.GetOrdersResponse
 */
export const GetOrdersResponse = new GetOrdersResponse$Type();
/**
 * @generated ServiceType for protobuf service com.psa.Exchange
 */
export const Exchange = new ServiceType("com.psa.Exchange", [
    { name: "CreateOrder", options: {}, I: CreateOrderRequest, O: CreateOrderResponse },
    { name: "GetOrders", options: {}, I: GetOrdersRequest, O: GetOrdersResponse }
]);
